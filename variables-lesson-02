6.1. 
Разберите свой код, и сделайте пять примеров, где можно более наглядно учесть в именах переменных уровни абстракции.
стандартная реализация в Spring когда внедренная зависимость имеет префикс имени такой же как класс в который внедряется.
К примеру, создадим интерфейс Name который задает поведение что у реализующего обязательно будет поле name
Имплементируем интерфейс сущностям UserEntity, ComponyEntity
Далее в классах работающих с этими сущностями если нам нужно использовать только имя то создавать переменные в стиле Name userEntity = new UserEntity().
Реализуя любой JpaRepository указываем имя которое реализуем - JpaRepository userRepository, Service userService, userController.

6.2. 
Приведите четыре примера, где вы в качестве имён переменных использовали или могли бы использовать технические термины из информатики.
applicationUrl
applicationPort
activitiMonitor
podMonitor


6.3. 
Придумайте или найдите в своём коде три примера, когда имена переменных даны с учётом контекста (функции, метода, класса).
метод boolean getFullPath() внутри должен внутри себя создать переменную fullPath, вернуть ее. В месте вызова функции результат вычислений сложить в переменную bookFullPath
метод boolean getSumArray() внутри должен внутри себя создать переменную arraySum, вернуть ее. В месте вызова функции результат вычислений сложить в переменную arraySum
метод boolean getMaxSalary() внутри должен внутри себя создать переменную maxSalary, вернуть ее. В месте вызова функции результат вычислений сложить в переменную maxSalaryOf....-имя массива для которого считали


6.4. Найдите пять имён переменных в своём коде, длины которых не укладываются в 8-20 символов, и исправьте, чтобы они укладывались в данный диапазон.
RbdValueInfoResultModel 3 + 5 + 4 + 5 + 5 - DictionaryInfoModel 10 + 4 + 5
DictionaryValueModel - DictionaryListModel 10 + 4 + 5
AttributiveCompositionResponse - AttributeTreeResponse 9 + 4 + 8
